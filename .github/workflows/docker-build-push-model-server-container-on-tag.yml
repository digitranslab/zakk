name: Build and Push Model Server Image on Tag

on:
  push:
    tags:
      - "*"

env:
  REGISTRY_IMAGE: ${{ contains(github.ref_name, 'cloud') && 'digitranslab/zakk-model-server-cloud' || 'digitranslab/zakk-model-server' }}
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  DEPLOYMENT: ${{ contains(github.ref_name, 'cloud') && 'cloud' || 'standalone' }}

  # don't tag cloud images with "latest"
  LATEST_TAG: ${{ contains(github.ref_name, 'latest') && !contains(github.ref_name, 'cloud') }}
  
jobs:

  check_model_server_changes:
    runs-on: ubuntu-latest
    outputs:
      changed: "true"
    steps:
      - name: Bypass check and set output
        run: echo "changed=true" >> $GITHUB_OUTPUT
        
  build-amd64:
    needs: [check_model_server_changes]
    if: needs.check_model_server_changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PLATFORM_PAIR: linux-amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-build cleanup
        run: |
          echo "=== Pre-build disk space ==="
          df -h
          free -h
          
          echo "=== Aggressive Docker cleanup ==="
          docker system prune -af --volumes
          docker builder prune -af
          
          echo "=== Clear GitHub Actions cache ==="
          rm -rf ~/.cache/pip
          rm -rf ~/.cache/huggingface
          
          echo "=== Post-cleanup disk space ==="
          df -h
          free -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push AMD64
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.model_server
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}-amd64
          build-args: |
            DANSWER_VERSION=${{ github.ref_name }}
          outputs: type=registry
          provenance: false
          # Reduced cache usage to save disk space
          cache-from: type=gha
          cache-to: type=gha,mode=min
          # Enable no-cache if disk space is critical
          no-cache: false

      - name: Post-build cleanup
        run: |
          echo "=== Post-build disk space ==="
          df -h
          free -h
          
          echo "=== Final cleanup ==="
          docker system prune -af --volumes
          docker builder prune -af

  build-arm64:
    needs: [check_model_server_changes]
    if: needs.check_model_server_changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PLATFORM_PAIR: linux-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-build cleanup
        run: |
          echo "=== Pre-build disk space ==="
          df -h
          free -h
          
          echo "=== Aggressive Docker cleanup ==="
          docker system prune -af --volumes
          docker builder prune -af
          
          echo "=== Clear GitHub Actions cache ==="
          rm -rf ~/.cache/pip
          rm -rf ~/.cache/huggingface
          
          echo "=== Post-cleanup disk space ==="
          df -h
          free -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push ARM64
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.model_server
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}-arm64
          build-args: |
            DANSWER_VERSION=${{ github.ref_name }}
          outputs: type=registry
          provenance: false
          # Reduced cache usage to save disk space
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: Post-build cleanup
        run: |
          echo "=== Post-build disk space ==="
          df -h
          free -h
          
          echo "=== Final cleanup ==="
          docker system prune -af --volumes
          docker builder prune -af

  merge-and-scan:
    needs: [build-amd64, build-arm64, check_model_server_changes]
    if: needs.check_model_server_changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and Push Multi-arch Manifest
        run: |
          docker buildx create --use
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }} \
            ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}-amd64 \
            ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}-arm64
          if [[ "${{ env.LATEST_TAG }}" == "true" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:latest \
              ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}-amd64 \
              ${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}-arm64
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"
          TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db:1"
          TRIVY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          image-ref: docker.io/${{ env.REGISTRY_IMAGE }}:${{ github.ref_name }}
          severity: "CRITICAL,HIGH"
          timeout: "10m"
